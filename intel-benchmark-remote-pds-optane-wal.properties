# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Contains all benchmarks
#

now0=`date +'%H%M%S'`

# JVM options.
JVM_OPTS=${JVM_OPTS}" -DIGNITE_QUIET=false"
JVM_OPTS=${JVM_OPTS}" -DIGNITE_CLUSTER_TYPE=nt"
JVM_OPTS=${JVM_OPTS}" -DIGNITE_CLUSTER_NAME=almaz"

# Uncomment to enable concurrent garbage collection (GC) if you encounter long GC pauses.
JVM_OPTS=${JVM_OPTS}" \
-ea \
-server \
-Xmx31g \
-Xms31g \
-XX:+UnlockExperimentalVMOptions \
-XX:+UseG1GC \
-XX:G1NewSizePercent=1 \
-XX:G1MaxNewSizePercent=5 \
-XX:G1LogLevel=finest \
-Djava.net.preferIPv4Stack=true \
-XX:+HeapDumpOnOutOfMemoryError \
-XX:HeapDumpPath=./heap \
-XX:+ExitOnOutOfMemoryError \
-XX:+PerfDisableSharedMem \
-XX:+AlwaysPreTouch \
-XX:+UnlockDiagnosticVMOptions \
-XX:+LogVMOutput \
-XX:ErrorFile=./error${now0}.log \
-XX:+ScavengeBeforeFullGC \
-XX:+DisableExplicitGC \
-Xloggc:./gc${now0}.log \
-XX:GCLogFileSize=100M \
-XX:+UseGCLogFileRotation \
-XX:NumberOfGCLogFiles=10 \
-XX:+PrintGC \
-XX:+PrintGCDetails \
-XX:+PrintGCDateStamps \
-XX:+PrintGCTimeStamps \
-XX:+PrintFlagsFinal \
-XX:+PrintGCApplicationStoppedTime \
-XX:+PrintAdaptiveSizePolicy \
-XX:+PrintTenuringDistribution \
-XX:+TraceMetadataHumongousAllocation \
-XX:+G1TraceEagerReclaimHumongousObjects \
-XX:+PrintReferenceGC \
-XX:+ParallelRefProcEnabled \
-XX:+PrintClassHistogramBeforeFullGC \
-XX:+PrintClassHistogramAfterFullGC \
-XX:LogFile=./safepoint.log \
-XX:+PrintSafepointStatistics \
-XX:PrintSafepointStatisticsCount=1 \
-DIGNITE_QUIET=false \
-DIGNITE_REUSE_MEMORY_ON_DEACTIVATE=true \
"

#Ignite version
ver="RELEASE-Apache-ignite-2.10.0-SSD-PDS-Optane-WAL"

# List of default probes.
# Add DStatProbe or VmStatProbe if your OS supports it (e.g. if running on Linux).
BENCHMARK_DEFAULT_PROBES=ThroughputLatencyProbe,PercentileProbe,DStatProbe

# Packages where the specified benchmark is searched by reflection mechanism.
BENCHMARK_PACKAGES=org.yardstickframework,org.apache.ignite.yardstick

# Flag which indicates to restart the servers after execution of every benchmark.
RESTART_SERVERS=true

# Probe point writer class name.
# BENCHMARK_WRITER=

# Comma-separated list of the hosts to run BenchmarkServers on. 2 nodes on local host are enabled by default.
SERVER_HOSTS=10.0.0.2,10.0.0.3,10.0.0.4

# Comma-separated list of the hosts to run BenchmarkDrivers on. 1 node on local host is enabled by default.
DRIVER_HOSTS=localhost

# Remote username.
# REMOTE_USER=

# Flag which indicates to upload yardstick from one host to every other and collect logs and results automatically.
AUTO_COPY=true

# Number of nodes, used to wait for the specified number of nodes to start.
nodesNum=$((`echo ${SERVER_HOSTS} | tr ',' '\n' | wc -l` + `echo ${DRIVER_HOSTS} | tr ',' '\n' | wc -l`))

# Backups count.
b=3

# Warmup.
w=60

# Duration.
d=90

# Threads count.
t=128

# Sync mode.
sm=PRIMARY_SYNC
wm=LOG_ONLY

# Jobs.
j=10

# Run configuration which contains all benchmarks.
# Note that each benchmark is set to run for 300 seconds (5 min) with warm-up set to 60 seconds (1 minute).
CONFIGS="\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -dn IgnitePutBenchmark -sn IgniteNode -ds ${ver}atomic-put-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -dn IgniteGetBenchmark -sn IgniteNode -ds ${ver}atomic-get-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -dn IgnitePutTxImplicitBenchmark -sn IgniteNode -ds ${ver}tx-optimistic-put-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -txc OPTIMISTIC -dn IgnitePutGetTxBenchmark -sn IgniteNode -ds ${ver}tx-optim-repRead-put-get-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -txc PESSIMISTIC -dn IgnitePutGetTxBenchmark -sn IgniteNode -ds ${ver}tx-pessim-repRead-put-get-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -txc OPTIMISTIC -txi SERIALIZABLE -dn IgnitePutGetTxBenchmark -sn IgniteNode -ds ${ver}tx-opt-serial-put-get-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -bs 100 -dn IgnitePutAllTxBenchmark -sn IgniteNode -ds ${ver}tx-putAll-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -bs 100 -dn IgnitePutAllBenchmark -sn IgniteNode -ds ${ver}atomic-putAll-${b}-backup,\
-cfg ${SCRIPT_DIR}/../config/intel-benchmark-remote-pds-optane-wal.xml -cl -nn ${nodesNum} -b ${b} -w ${w} -d ${d} -t ${t} -sm ${sm} -wm ${wm} -dn IgniteSqlQueryBenchmark -sn IgniteNode -ds ${ver}sql-query-${b}-backup,\
"